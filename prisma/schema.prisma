// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma"
  output   = "../src/api/models"
  // (default) the directory where generated zod schemas will be saved

  relationModel = false
  // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelSuffix = "Model"
  // (default) Suffix to apply to your prisma models when naming Zod schemas

  useDecimalJs = true
  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

// Auth Models

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.Text
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Migration issues
  expires_in Int?
  version    String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @map("expires_at") @db.DateTime(3)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  is_onboarded  Boolean   @default(false)
  created_at    DateTime  @default(now()) @db.DateTime(3)
  updated_at    DateTime  @default(now()) @updatedAt @db.DateTime(3)
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  name          String?
  avatar        String?   @db.Text

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @map("expires_at") @db.DateTime(3)

  @@unique([identifier, token])
}
